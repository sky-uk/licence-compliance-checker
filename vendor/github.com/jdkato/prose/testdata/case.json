[
    {
        "input": "follow step-by-step instructions",
        "none": "follow step by step instructions",
        "snake": "follow_step_by_step_instructions",
        "param": "follow-step-by-step-instructions",
        "dot": "follow.step.by.step.instructions",
        "constant": "FOLLOW_STEP_BY_STEP_INSTRUCTIONS",
        "pascal": "FollowStepByStepInstructions",
        "camel": "followStepByStepInstructions"
    },
    {
        "input": "follow step-BY-step instructions",
        "none": "follow step by step instructions",
        "snake": "follow_step_by_step_instructions",
        "param": "follow-step-by-step-instructions",
        "dot": "follow.step.by.step.instructions",
        "constant": "FOLLOW_STEP_BY_STEP_INSTRUCTIONS",
        "pascal": "FollowStepByStepInstructions",
        "camel": "followStepByStepInstructions"
    },
    {
        "input": "this sub-phrase is nice",
        "none": "this sub phrase is nice",
        "snake": "this_sub_phrase_is_nice",
        "param": "this-sub-phrase-is-nice",
        "dot": "this.sub.phrase.is.nice",
        "constant": "THIS_SUB_PHRASE_IS_NICE",
        "pascal": "ThisSubPhraseIsNice",
        "camel": "thisSubPhraseIsNice"
    },
    {
        "input": "catchy title: a subtitle",
        "none": "catchy title a subtitle",
        "snake": "catchy_title_a_subtitle",
        "param": "catchy-title-a-subtitle",
        "dot": "catchy.title.a.subtitle",
        "constant": "CATCHY_TITLE_A_SUBTITLE",
        "pascal": "CatchyTitleASubtitle",
        "camel": "catchyTitleASubtitle"
    },
    {
        "input": "catchy title: \"a quoted subtitle\"",
        "none": "catchy title a quoted subtitle",
        "snake": "catchy_title_a_quoted_subtitle",
        "param": "catchy-title-a-quoted-subtitle",
        "dot": "catchy.title.a.quoted.subtitle",
        "constant": "CATCHY_TITLE_A_QUOTED_SUBTITLE",
        "pascal": "CatchyTitleAQuotedSubtitle",
        "camel": "catchyTitleAQuotedSubtitle"
    },
    {
        "input": "catchy title: “‘a twice quoted subtitle’”",
        "none": "catchy title a twice quoted subtitle",
        "snake": "catchy_title_a_twice_quoted_subtitle",
        "param": "catchy-title-a-twice-quoted-subtitle",
        "dot": "catchy.title.a.twice.quoted.subtitle",
        "constant": "CATCHY_TITLE_A_TWICE_QUOTED_SUBTITLE",
        "pascal": "CatchyTitleATwiceQuotedSubtitle",
        "camel": "catchyTitleATwiceQuotedSubtitle"
    },
    {
        "input": "\"a title inside double quotes\"",
        "none": "a title inside double quotes",
        "snake": "a_title_inside_double_quotes",
        "param": "a-title-inside-double-quotes",
        "dot": "a.title.inside.double.quotes",
        "constant": "A_TITLE_INSIDE_DOUBLE_QUOTES",
        "pascal": "ATitleInsideDoubleQuotes",
        "camel": "aTitleInsideDoubleQuotes"
    },
    {
        "input": "all words capitalized",
        "none": "all words capitalized",
        "snake": "all_words_capitalized",
        "param": "all-words-capitalized",
        "dot": "all.words.capitalized",
        "constant": "ALL_WORDS_CAPITALIZED",
        "pascal": "AllWordsCapitalized",
        "camel": "allWordsCapitalized"
    },
    {
        "input": "small words are for by and of lowercase",
        "none": "small words are for by and of lowercase",
        "snake": "small_words_are_for_by_and_of_lowercase",
        "param": "small-words-are-for-by-and-of-lowercase",
        "dot": "small.words.are.for.by.and.of.lowercase",
        "constant": "SMALL_WORDS_ARE_FOR_BY_AND_OF_LOWERCASE",
        "pascal": "SmallWordsAreForByAndOfLowercase",
        "camel": "smallWordsAreForByAndOfLowercase"
    },
    {
        "input": "a small word starts",
        "none": "a small word starts",
        "snake": "a_small_word_starts",
        "param": "a-small-word-starts",
        "dot": "a.small.word.starts",
        "constant": "A_SMALL_WORD_STARTS",
        "pascal": "ASmallWordStarts",
        "camel": "aSmallWordStarts"
    },
    {
        "input": "a small word it ends on",
        "none": "a small word it ends on",
        "snake": "a_small_word_it_ends_on",
        "param": "a-small-word-it-ends-on",
        "dot": "a.small.word.it.ends.on",
        "constant": "A_SMALL_WORD_IT_ENDS_ON",
        "pascal": "ASmallWordItEndsOn",
        "camel": "aSmallWordItEndsOn"
    },
    {
        "input": "do questions work?",
        "none": "do questions work",
        "snake": "do_questions_work",
        "param": "do-questions-work",
        "dot": "do.questions.work",
        "constant": "DO_QUESTIONS_WORK",
        "pascal": "DoQuestionsWork",
        "camel": "doQuestionsWork"
    },
    {
        "input": "multiple sentences. more than one.",
        "none": "multiple sentences more than one",
        "snake": "multiple_sentences_more_than_one",
        "param": "multiple-sentences-more-than-one",
        "dot": "multiple.sentences.more.than.one",
        "constant": "MULTIPLE_SENTENCES_MORE_THAN_ONE",
        "pascal": "MultipleSentencesMoreThanOne",
        "camel": "multipleSentencesMoreThanOne"
    },
    {
        "input": "Ends with small word of",
        "none": "ends with small word of",
        "snake": "ends_with_small_word_of",
        "param": "ends-with-small-word-of",
        "dot": "ends.with.small.word.of",
        "constant": "ENDS_WITH_SMALL_WORD_OF",
        "pascal": "EndsWithSmallWordOf",
        "camel": "endsWithSmallWordOf"
    },
    {
        "input": "double quoted \"inner\" word",
        "none": "double quoted inner word",
        "snake": "double_quoted_inner_word",
        "param": "double-quoted-inner-word",
        "dot": "double.quoted.inner.word",
        "constant": "DOUBLE_QUOTED_INNER_WORD",
        "pascal": "DoubleQuotedInnerWord",
        "camel": "doubleQuotedInnerWord"
    },
    {
        "input": "single quoted 'inner' word",
        "none": "single quoted inner word",
        "snake": "single_quoted_inner_word",
        "param": "single-quoted-inner-word",
        "dot": "single.quoted.inner.word",
        "constant": "SINGLE_QUOTED_INNER_WORD",
        "pascal": "SingleQuotedInnerWord",
        "camel": "singleQuotedInnerWord"
    },
    {
        "input": "fancy double quoted “inner” word",
        "none": "fancy double quoted inner word",
        "snake": "fancy_double_quoted_inner_word",
        "param": "fancy-double-quoted-inner-word",
        "dot": "fancy.double.quoted.inner.word",
        "constant": "FANCY_DOUBLE_QUOTED_INNER_WORD",
        "pascal": "FancyDoubleQuotedInnerWord",
        "camel": "fancyDoubleQuotedInnerWord"
    },
    {
        "input": "fancy single quoted ‘inner’ word",
        "none": "fancy single quoted inner word",
        "snake": "fancy_single_quoted_inner_word",
        "param": "fancy-single-quoted-inner-word",
        "dot": "fancy.single.quoted.inner.word",
        "constant": "FANCY_SINGLE_QUOTED_INNER_WORD",
        "pascal": "FancySingleQuotedInnerWord",
        "camel": "fancySingleQuotedInnerWord"
    },
    {
        "input": "this vs. that",
        "none": "this vs that",
        "snake": "this_vs_that",
        "param": "this-vs-that",
        "dot": "this.vs.that",
        "constant": "THIS_VS_THAT",
        "pascal": "ThisVsThat",
        "camel": "thisVsThat"
    },
    {
        "input": "this vs that",
        "none": "this vs that",
        "snake": "this_vs_that",
        "param": "this-vs-that",
        "dot": "this.vs.that",
        "constant": "THIS_VS_THAT",
        "pascal": "ThisVsThat",
        "camel": "thisVsThat"
    },
    {
        "input": "this v. that",
        "none": "this v that",
        "snake": "this_v_that",
        "param": "this-v-that",
        "dot": "this.v.that",
        "constant": "THIS_V_THAT",
        "pascal": "ThisVThat",
        "camel": "thisVThat"
    },
    {
        "input": "this v that",
        "none": "this v that",
        "snake": "this_v_that",
        "param": "this-v-that",
        "dot": "this.v.that",
        "constant": "THIS_V_THAT",
        "pascal": "ThisVThat",
        "camel": "thisVThat"
    },
    {
        "input": "catchy title: substance subtitle",
        "none": "catchy title substance subtitle",
        "snake": "catchy_title_substance_subtitle",
        "param": "catchy-title-substance-subtitle",
        "dot": "catchy.title.substance.subtitle",
        "constant": "CATCHY_TITLE_SUBSTANCE_SUBTITLE",
        "pascal": "CatchyTitleSubstanceSubtitle",
        "camel": "catchyTitleSubstanceSubtitle"
    },
    {
        "input": "have you read “The Lottery”?",
        "none": "have you read the lottery",
        "snake": "have_you_read_the_lottery",
        "param": "have-you-read-the-lottery",
        "dot": "have.you.read.the.lottery",
        "constant": "HAVE_YOU_READ_THE_LOTTERY",
        "pascal": "HaveYouReadTheLottery",
        "camel": "haveYouReadTheLottery"
    },
    {
        "input": "Drink this piña colada while you listen to ænima",
        "none": "drink this piña colada while you listen to ænima",
        "snake": "drink_this_piña_colada_while_you_listen_to_ænima",
        "param": "drink-this-piña-colada-while-you-listen-to-ænima",
        "dot": "drink.this.piña.colada.while.you.listen.to.ænima",
        "constant": "DRINK_THIS_PIÑA_COLADA_WHILE_YOU_LISTEN_TO_ÆNIMA",
        "pascal": "DrinkThisPiñaColadaWhileYouListenToÆnima",
        "camel": "drinkThisPiñaColadaWhileYouListenToÆnima"
    },
    {
        "input": "don't break",
        "none": "don t break",
        "snake": "don_t_break",
        "param": "don-t-break",
        "dot": "don.t.break",
        "constant": "DON_T_BREAK",
        "pascal": "DonTBreak",
        "camel": "donTBreak"
    },
    {
        "input": "we keep NASA capitalized",
        "none": "we keep nasa capitalized",
        "snake": "we_keep_nasa_capitalized",
        "param": "we-keep-nasa-capitalized",
        "dot": "we.keep.nasa.capitalized",
        "constant": "WE_KEEP_NASA_CAPITALIZED",
        "pascal": "WeKeepNasaCapitalized",
        "camel": "weKeepNasaCapitalized"
    },
    {
        "input": "leave Q&A unscathed",
        "none": "leave q a unscathed",
        "snake": "leave_q_a_unscathed",
        "param": "leave-q-a-unscathed",
        "dot": "leave.q.a.unscathed",
        "constant": "LEAVE_Q_A_UNSCATHED",
        "pascal": "LeaveQAUnscathed",
        "camel": "leaveQAUnscathed"
    },
    {
        "input": "your hair[cut] looks (nice)",
        "none": "your hair cut looks nice",
        "snake": "your_hair_cut_looks_nice",
        "param": "your-hair-cut-looks-nice",
        "dot": "your.hair.cut.looks.nice",
        "constant": "YOUR_HAIR_CUT_LOOKS_NICE",
        "pascal": "YourHairCutLooksNice",
        "camel": "yourHairCutLooksNice"
    },
    {
        "input": "keep that colo(u)r",
        "none": "keep that colo u r",
        "snake": "keep_that_colo_u_r",
        "param": "keep-that-colo-u-r",
        "dot": "keep.that.colo.u.r",
        "constant": "KEEP_THAT_COLO_U_R",
        "pascal": "KeepThatColoUR",
        "camel": "keepThatColoUR"
    },
    {
        "input": "capitalize hyphenated words on-demand",
        "none": "capitalize hyphenated words on demand",
        "snake": "capitalize_hyphenated_words_on_demand",
        "param": "capitalize-hyphenated-words-on-demand",
        "dot": "capitalize.hyphenated.words.on.demand",
        "constant": "CAPITALIZE_HYPHENATED_WORDS_ON_DEMAND",
        "pascal": "CapitalizeHyphenatedWordsOnDemand",
        "camel": "capitalizeHyphenatedWordsOnDemand"
    },
    {
        "input": "take them on: special lower cases",
        "none": "take them on special lower cases",
        "snake": "take_them_on_special_lower_cases",
        "param": "take-them-on-special-lower-cases",
        "dot": "take.them.on.special.lower.cases",
        "constant": "TAKE_THEM_ON_SPECIAL_LOWER_CASES",
        "pascal": "TakeThemOnSpecialLowerCases",
        "camel": "takeThemOnSpecialLowerCases"
    },
    {
        "input": "Notes and observations regarding Apple’s announcements from ‘The Beat Goes On’ special event",
        "none": "notes and observations regarding apple s announcements from the beat goes on special event",
        "snake": "notes_and_observations_regarding_apple_s_announcements_from_the_beat_goes_on_special_event",
        "param": "notes-and-observations-regarding-apple-s-announcements-from-the-beat-goes-on-special-event",
        "dot": "notes.and.observations.regarding.apple.s.announcements.from.the.beat.goes.on.special.event",
        "constant": "NOTES_AND_OBSERVATIONS_REGARDING_APPLE_S_ANNOUNCEMENTS_FROM_THE_BEAT_GOES_ON_SPECIAL_EVENT",
        "pascal": "NotesAndObservationsRegardingAppleSAnnouncementsFromTheBeatGoesOnSpecialEvent",
        "camel": "notesAndObservationsRegardingAppleSAnnouncementsFromTheBeatGoesOnSpecialEvent"
    },
    {
        "input": "a title and/or string",
        "none": "a title and or string",
        "snake": "a_title_and_or_string",
        "param": "a-title-and-or-string",
        "dot": "a.title.and.or.string",
        "constant": "A_TITLE_AND_OR_STRING",
        "pascal": "ATitleAndOrString",
        "camel": "aTitleAndOrString"
    },
    {
        "input": "dance with me/let’s face the music and dance",
        "none": "dance with me let s face the music and dance",
        "snake": "dance_with_me_let_s_face_the_music_and_dance",
        "param": "dance-with-me-let-s-face-the-music-and-dance",
        "dot": "dance.with.me.let.s.face.the.music.and.dance",
        "constant": "DANCE_WITH_ME_LET_S_FACE_THE_MUSIC_AND_DANCE",
        "pascal": "DanceWithMeLetSFaceTheMusicAndDance",
        "camel": "danceWithMeLetSFaceTheMusicAndDance"
    },
    {
        "input": "34th 3rd 2nd",
        "none": "34th 3rd 2nd",
        "snake": "34th_3rd_2nd",
        "param": "34th-3rd-2nd",
        "dot": "34th.3rd.2nd",
        "constant": "34TH_3RD_2ND",
        "pascal": "34th3rd2nd",
        "camel": "34th3rd2nd"
    },
    {
        "input": "Q&A with steve jobs: 'that's what happens in technology'",
        "none": "q a with steve jobs that s what happens in technology",
        "snake": "q_a_with_steve_jobs_that_s_what_happens_in_technology",
        "param": "q-a-with-steve-jobs-that-s-what-happens-in-technology",
        "dot": "q.a.with.steve.jobs.that.s.what.happens.in.technology",
        "constant": "Q_A_WITH_STEVE_JOBS_THAT_S_WHAT_HAPPENS_IN_TECHNOLOGY",
        "pascal": "QAWithSteveJobsThatSWhatHappensInTechnology",
        "camel": "qAWithSteveJobsThatSWhatHappensInTechnology"
    },
    {
        "input": "What is AT&T's problem?",
        "none": "what is at t s problem",
        "snake": "what_is_at_t_s_problem",
        "param": "what-is-at-t-s-problem",
        "dot": "what.is.at.t.s.problem",
        "constant": "WHAT_IS_AT_T_S_PROBLEM",
        "pascal": "WhatIsAtTSProblem",
        "camel": "whatIsAtTSProblem"
    },
    {
        "input": "Apple deal with AT&T falls through",
        "none": "apple deal with at t falls through",
        "snake": "apple_deal_with_at_t_falls_through",
        "param": "apple-deal-with-at-t-falls-through",
        "dot": "apple.deal.with.at.t.falls.through",
        "constant": "APPLE_DEAL_WITH_AT_T_FALLS_THROUGH",
        "pascal": "AppleDealWithAtTFallsThrough",
        "camel": "appleDealWithAtTFallsThrough"
    },
    {
        "input": "The SEC's Apple probe: what you need to know",
        "none": "the sec s apple probe what you need to know",
        "snake": "the_sec_s_apple_probe_what_you_need_to_know",
        "param": "the-sec-s-apple-probe-what-you-need-to-know",
        "dot": "the.sec.s.apple.probe.what.you.need.to.know",
        "constant": "THE_SEC_S_APPLE_PROBE_WHAT_YOU_NEED_TO_KNOW",
        "pascal": "TheSecSAppleProbeWhatYouNeedToKnow",
        "camel": "theSecSAppleProbeWhatYouNeedToKnow"
    },
    {
        "input": "The SEC's Apple probe: what you need to know",
        "none": "the sec s apple probe what you need to know",
        "snake": "the_sec_s_apple_probe_what_you_need_to_know",
        "param": "the-sec-s-apple-probe-what-you-need-to-know",
        "dot": "the.sec.s.apple.probe.what.you.need.to.know",
        "constant": "THE_SEC_S_APPLE_PROBE_WHAT_YOU_NEED_TO_KNOW",
        "pascal": "TheSecSAppleProbeWhatYouNeedToKnow",
        "camel": "theSecSAppleProbeWhatYouNeedToKnow"
    },
    {
        "input": "'by the Way, small word at the start but within quotes.'",
        "none": "by the way small word at the start but within quotes",
        "snake": "by_the_way_small_word_at_the_start_but_within_quotes",
        "param": "by-the-way-small-word-at-the-start-but-within-quotes",
        "dot": "by.the.way.small.word.at.the.start.but.within.quotes",
        "constant": "BY_THE_WAY_SMALL_WORD_AT_THE_START_BUT_WITHIN_QUOTES",
        "pascal": "ByTheWaySmallWordAtTheStartButWithinQuotes",
        "camel": "byTheWaySmallWordAtTheStartButWithinQuotes"
    },
    {
        "input": "Small word at end is nothing to be afraid of",
        "none": "small word at end is nothing to be afraid of",
        "snake": "small_word_at_end_is_nothing_to_be_afraid_of",
        "param": "small-word-at-end-is-nothing-to-be-afraid-of",
        "dot": "small.word.at.end.is.nothing.to.be.afraid.of",
        "constant": "SMALL_WORD_AT_END_IS_NOTHING_TO_BE_AFRAID_OF",
        "pascal": "SmallWordAtEndIsNothingToBeAfraidOf",
        "camel": "smallWordAtEndIsNothingToBeAfraidOf"
    },
    {
        "input": "Starting Sub-Phrase With a Small Word: a Trick, Perhaps?",
        "none": "starting sub phrase with a small word a trick perhaps",
        "snake": "starting_sub_phrase_with_a_small_word_a_trick_perhaps",
        "param": "starting-sub-phrase-with-a-small-word-a-trick-perhaps",
        "dot": "starting.sub.phrase.with.a.small.word.a.trick.perhaps",
        "constant": "STARTING_SUB_PHRASE_WITH_A_SMALL_WORD_A_TRICK_PERHAPS",
        "pascal": "StartingSubPhraseWithASmallWordATrickPerhaps",
        "camel": "startingSubPhraseWithASmallWordATrickPerhaps"
    },
    {
        "input": "Sub-Phrase With a Small Word in Quotes: 'a Trick, Perhaps?'",
        "none": "sub phrase with a small word in quotes a trick perhaps",
        "snake": "sub_phrase_with_a_small_word_in_quotes_a_trick_perhaps",
        "param": "sub-phrase-with-a-small-word-in-quotes-a-trick-perhaps",
        "dot": "sub.phrase.with.a.small.word.in.quotes.a.trick.perhaps",
        "constant": "SUB_PHRASE_WITH_A_SMALL_WORD_IN_QUOTES_A_TRICK_PERHAPS",
        "pascal": "SubPhraseWithASmallWordInQuotesATrickPerhaps",
        "camel": "subPhraseWithASmallWordInQuotesATrickPerhaps"
    },
    {
        "input": "Starting a Hyphen Delimited Sub-Phrase With a Small Word - a Trick, Perhaps?",
        "none": "starting a hyphen delimited sub phrase with a small word a trick perhaps",
        "snake": "starting_a_hyphen_delimited_sub_phrase_with_a_small_word_a_trick_perhaps",
        "param": "starting-a-hyphen-delimited-sub-phrase-with-a-small-word-a-trick-perhaps",
        "dot": "starting.a.hyphen.delimited.sub.phrase.with.a.small.word.a.trick.perhaps",
        "constant": "STARTING_A_HYPHEN_DELIMITED_SUB_PHRASE_WITH_A_SMALL_WORD_A_TRICK_PERHAPS",
        "pascal": "StartingAHyphenDelimitedSubPhraseWithASmallWordATrickPerhaps",
        "camel": "startingAHyphenDelimitedSubPhraseWithASmallWordATrickPerhaps"
    },
    {
        "input": "Hyphen Delimited Sub-Phrase With a Small Word in Quotes - 'a Trick, Perhaps?'",
        "none": "hyphen delimited sub phrase with a small word in quotes a trick perhaps",
        "snake": "hyphen_delimited_sub_phrase_with_a_small_word_in_quotes_a_trick_perhaps",
        "param": "hyphen-delimited-sub-phrase-with-a-small-word-in-quotes-a-trick-perhaps",
        "dot": "hyphen.delimited.sub.phrase.with.a.small.word.in.quotes.a.trick.perhaps",
        "constant": "HYPHEN_DELIMITED_SUB_PHRASE_WITH_A_SMALL_WORD_IN_QUOTES_A_TRICK_PERHAPS",
        "pascal": "HyphenDelimitedSubPhraseWithASmallWordInQuotesATrickPerhaps",
        "camel": "hyphenDelimitedSubPhraseWithASmallWordInQuotesATrickPerhaps"
    },
    {
        "input": "Snakes on a Plane - The TV Edit - The Famous Line",
        "none": "snakes on a plane the tv edit the famous line",
        "snake": "snakes_on_a_plane_the_tv_edit_the_famous_line",
        "param": "snakes-on-a-plane-the-tv-edit-the-famous-line",
        "dot": "snakes.on.a.plane.the.tv.edit.the.famous.line",
        "constant": "SNAKES_ON_A_PLANE_THE_TV_EDIT_THE_FAMOUS_LINE",
        "pascal": "SnakesOnAPlaneTheTvEditTheFamousLine",
        "camel": "snakesOnAPlaneTheTvEditTheFamousLine"
    },
    {
        "input": "Starting an Em Dash Delimited Sub-Phrase With a Small Word — a Trick, Perhaps?",
        "none": "starting an em dash delimited sub phrase with a small word a trick perhaps",
        "snake": "starting_an_em_dash_delimited_sub_phrase_with_a_small_word_a_trick_perhaps",
        "param": "starting-an-em-dash-delimited-sub-phrase-with-a-small-word-a-trick-perhaps",
        "dot": "starting.an.em.dash.delimited.sub.phrase.with.a.small.word.a.trick.perhaps",
        "constant": "STARTING_AN_EM_DASH_DELIMITED_SUB_PHRASE_WITH_A_SMALL_WORD_A_TRICK_PERHAPS",
        "pascal": "StartingAnEmDashDelimitedSubPhraseWithASmallWordATrickPerhaps",
        "camel": "startingAnEmDashDelimitedSubPhraseWithASmallWordATrickPerhaps"
    },
    {
        "input": "Em Dash Delimited Sub-Phrase With a Small Word in Quotes — 'a Trick, Perhaps?'",
        "none": "em dash delimited sub phrase with a small word in quotes a trick perhaps",
        "snake": "em_dash_delimited_sub_phrase_with_a_small_word_in_quotes_a_trick_perhaps",
        "param": "em-dash-delimited-sub-phrase-with-a-small-word-in-quotes-a-trick-perhaps",
        "dot": "em.dash.delimited.sub.phrase.with.a.small.word.in.quotes.a.trick.perhaps",
        "constant": "EM_DASH_DELIMITED_SUB_PHRASE_WITH_A_SMALL_WORD_IN_QUOTES_A_TRICK_PERHAPS",
        "pascal": "EmDashDelimitedSubPhraseWithASmallWordInQuotesATrickPerhaps",
        "camel": "emDashDelimitedSubPhraseWithASmallWordInQuotesATrickPerhaps"
    },
    {
        "input": "Snakes on a Plane — The TV Edit — The Famous Line",
        "none": "snakes on a plane the tv edit the famous line",
        "snake": "snakes_on_a_plane_the_tv_edit_the_famous_line",
        "param": "snakes-on-a-plane-the-tv-edit-the-famous-line",
        "dot": "snakes.on.a.plane.the.tv.edit.the.famous.line",
        "constant": "SNAKES_ON_A_PLANE_THE_TV_EDIT_THE_FAMOUS_LINE",
        "pascal": "SnakesOnAPlaneTheTvEditTheFamousLine",
        "camel": "snakesOnAPlaneTheTvEditTheFamousLine"
    },
    {
        "input": "\"Nothing to Be Afraid of?\"",
        "none": "nothing to be afraid of",
        "snake": "nothing_to_be_afraid_of",
        "param": "nothing-to-be-afraid-of",
        "dot": "nothing.to.be.afraid.of",
        "constant": "NOTHING_TO_BE_AFRAID_OF",
        "pascal": "NothingToBeAfraidOf",
        "camel": "nothingToBeAfraidOf"
    },
    {
        "input": "a thing",
        "none": "a thing",
        "snake": "a_thing",
        "param": "a-thing",
        "dot": "a.thing",
        "constant": "A_THING",
        "pascal": "AThing",
        "camel": "aThing"
    },
    {
        "input": "2lmc Spool: 'gruber on OmniFocus and vapo(u)rware'",
        "none": "2lmc spool gruber on omni focus and vapo u rware",
        "snake": "2lmc_spool_gruber_on_omni_focus_and_vapo_u_rware",
        "param": "2lmc-spool-gruber-on-omni-focus-and-vapo-u-rware",
        "dot": "2lmc.spool.gruber.on.omni.focus.and.vapo.u.rware",
        "constant": "2LMC_SPOOL_GRUBER_ON_OMNI_FOCUS_AND_VAPO_U_RWARE",
        "pascal": "2lmcSpoolGruberOnOmniFocusAndVapoURware",
        "camel": "2lmcSpoolGruberOnOmniFocusAndVapoURware"
    },
    {
        "input": "reading between the lines of steve jobs’s ‘thoughts on music’",
        "none": "reading between the lines of steve jobs s thoughts on music",
        "snake": "reading_between_the_lines_of_steve_jobs_s_thoughts_on_music",
        "param": "reading-between-the-lines-of-steve-jobs-s-thoughts-on-music",
        "dot": "reading.between.the.lines.of.steve.jobs.s.thoughts.on.music",
        "constant": "READING_BETWEEN_THE_LINES_OF_STEVE_JOBS_S_THOUGHTS_ON_MUSIC",
        "pascal": "ReadingBetweenTheLinesOfSteveJobsSThoughtsOnMusic",
        "camel": "readingBetweenTheLinesOfSteveJobsSThoughtsOnMusic"
    },
    {
        "input": "seriously, ‘repair permissions’ is voodoo",
        "none": "seriously repair permissions is voodoo",
        "snake": "seriously_repair_permissions_is_voodoo",
        "param": "seriously-repair-permissions-is-voodoo",
        "dot": "seriously.repair.permissions.is.voodoo",
        "constant": "SERIOUSLY_REPAIR_PERMISSIONS_IS_VOODOO",
        "pascal": "SeriouslyRepairPermissionsIsVoodoo",
        "camel": "seriouslyRepairPermissionsIsVoodoo"
    },
    {
        "input": "generalissimo francisco franco: still dead; kieren McCarthy: still a jackass",
        "none": "generalissimo francisco franco still dead kieren mc carthy still a jackass",
        "snake": "generalissimo_francisco_franco_still_dead_kieren_mc_carthy_still_a_jackass",
        "param": "generalissimo-francisco-franco-still-dead-kieren-mc-carthy-still-a-jackass",
        "dot": "generalissimo.francisco.franco.still.dead.kieren.mc.carthy.still.a.jackass",
        "constant": "GENERALISSIMO_FRANCISCO_FRANCO_STILL_DEAD_KIEREN_MC_CARTHY_STILL_A_JACKASS",
        "pascal": "GeneralissimoFranciscoFrancoStillDeadKierenMcCarthyStillAJackass",
        "camel": "generalissimoFranciscoFrancoStillDeadKierenMcCarthyStillAJackass"
    },
    {
        "input": "O'Reilly should be untouched",
        "none": "o reilly should be untouched",
        "snake": "o_reilly_should_be_untouched",
        "param": "o-reilly-should-be-untouched",
        "dot": "o.reilly.should.be.untouched",
        "constant": "O_REILLY_SHOULD_BE_UNTOUCHED",
        "pascal": "OReillyShouldBeUntouched",
        "camel": "oReillyShouldBeUntouched"
    },
    {
        "input": "Mr McTavish went to MacDonalds",
        "none": "mr mc tavish went to mac donalds",
        "snake": "mr_mc_tavish_went_to_mac_donalds",
        "param": "mr-mc-tavish-went-to-mac-donalds",
        "dot": "mr.mc.tavish.went.to.mac.donalds",
        "constant": "MR_MC_TAVISH_WENT_TO_MAC_DONALDS",
        "pascal": "MrMcTavishWentToMacDonalds",
        "camel": "mrMcTavishWentToMacDonalds"
    },
    {
        "input": "this shouldn't\nget mangled",
        "none": "this shouldn t get mangled",
        "snake": "this_shouldn_t_get_mangled",
        "param": "this-shouldn-t-get-mangled",
        "dot": "this.shouldn.t.get.mangled",
        "constant": "THIS_SHOULDN_T_GET_MANGLED",
        "pascal": "ThisShouldnTGetMangled",
        "camel": "thisShouldnTGetMangled"
    },
    {
        "input": "mac mc MAC MC machine",
        "none": "mac mc mac mc machine",
        "snake": "mac_mc_mac_mc_machine",
        "param": "mac-mc-mac-mc-machine",
        "dot": "mac.mc.mac.mc.machine",
        "constant": "MAC_MC_MAC_MC_MACHINE",
        "pascal": "MacMcMacMcMachine",
        "camel": "macMcMacMcMachine"
    },
    {
        "input": "foo bar 5th st",
        "none": "foo bar 5th st",
        "snake": "foo_bar_5th_st",
        "param": "foo-bar-5th-st",
        "dot": "foo.bar.5th.st",
        "constant": "FOO_BAR_5TH_ST",
        "pascal": "FooBar5thSt",
        "camel": "fooBar5thSt"
    },
    {
        "input": "hmm ... this is interesting...",
        "none": "hmm this is interesting",
        "snake": "hmm_this_is_interesting",
        "param": "hmm-this-is-interesting",
        "dot": "hmm.this.is.interesting",
        "constant": "HMM_THIS_IS_INTERESTING",
        "pascal": "HmmThisIsInteresting",
        "camel": "hmmThisIsInteresting"
    }
]